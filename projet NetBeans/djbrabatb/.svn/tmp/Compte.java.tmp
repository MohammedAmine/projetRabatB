<<<<<<< .mine
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package persistence;

import persistence.CompteCourant;
import persistence.CompteEpargne;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;


@Entity
@Table(name = "COMPTE")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Compte.findAll", query = "SELECT c FROM Compte c"),
    @NamedQuery(name = "Compte.findByCompteid", query = "SELECT c FROM Compte c WHERE c.compteid = :compteid"),
    @NamedQuery(name = "Compte.findByComptedatecreation", query = "SELECT c FROM Compte c WHERE c.comptedatecreation = :comptedatecreation"),
    @NamedQuery(name = "Compte.findByComptesolde", query = "SELECT c FROM Compte c WHERE c.comptesolde = :comptesolde"),
    @NamedQuery(name = "Compte.findByCompteetat", query = "SELECT c FROM Compte c WHERE c.compteetat = :compteetat")})
public class Compte implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Column    
    private Integer compteid;
    
    @Column
    @Temporal(TemporalType.DATE)
    private Date comptedatecreation;
    
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Column(name = "COMPTESOLDE")
    private Float comptesolde;
    
    @Size(max = 255)
    @Column(name = "COMPTEETAT")
    private String compteetat;
    
    @OneToOne(cascade = CascadeType.ALL, mappedBy = "compte")
    private CompteEpargne compteepargne;
    
    @OneToOne(cascade = CascadeType.ALL, mappedBy = "compte")
    private CompteCourant comptecourant;
    
    
    
    

    public Compte() {
    }

    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (compteid != null ? compteid.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Compte)) {
            return false;
        }
        Compte other = (Compte) object;
        if ((this.compteid == null && other.compteid != null) || (this.compteid != null && !this.compteid.equals(other.compteid))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "entities.Compte[ compteid=" + compteid + " ]";
    }
    
}
=======
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package persistence;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 *
 * @author mohammedamine
 */
@Entity
public abstract class Compte  implements Serializable {

    public Compte() {
    }
    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int compteID;
    
    
    @Temporal(TemporalType.DATE)
    private Date compteDateCreation;
    
    
    private float compteSolde;
    
    @ManyToOne    
    private Client compteProprietaire;
    
    
    @OneToMany(mappedBy = "actionUtilisateurCompte")
    private List<ActionUtilisateur> compteListeActions;
    

    public int getCompteID() {
        return compteID;
    }

    public void setCompteID(int compteID) {
        this.compteID = compteID;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 67 * hash + this.compteID;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Compte other = (Compte) obj;
        if (this.compteID != other.compteID) {
            return false;
        }
        return true;
    }

    
}
>>>>>>> .r14
